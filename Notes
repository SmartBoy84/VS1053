SCI - Serial Control Interface
SDI - Serial Data Interface
 
System always starts in 1.0x mode
This means that the system's internal clock speed is equal to the input clock speed
Thus, internal clock speed = 13
After the system has been initialized the clock speed register can be set to 4.5x mode (max)
After this, the external clock speed can also be changed

VS10xx main modes:
SM_SDINEW is by default set to 1 (compatibility mode also exists, depecrated)

XDCS Low - enables SDI mode
XCS Low - Enables SCI pin

SCK - Serial Clock Input

SI - Serial input, sampled on rising CLK edge
SO - data is shifted out on falling SCK edge
*/


State of DREQ indicates if VS boards [2048 byte] FIFO can receive data
  - High - Can take atleast 32 bytes of SDI data or one SCI command
  - LOW - Stream buffer too full (Will go down while SCI operation in progress)
  - If DREQ turns low during transmission, do not terminate it
  - Make sure to wait after sending SCI commands
  - Check DREQ after every 32 bytes

SCI:
Consists of:
8 bit Instruction byte (opcode) + 8 bit address byte + 16-bit "data word"
Bytes send MSb first
XCS should be low for the full duration

All of the registers have their own run time, just add a small delay man (yield() should be enough)

R/W specified by the appropriate opcode
Read: 0x3
Write: 0x2
Ensure both are 8 bit

Ensure XCS is set high atfer command has been sent or info received

For registers with multiple words, each words must be spent in sequence

SCI reads are done at CLKI/7
SCI and SDI writes can be done at CLKI/4

Check page 7 for other specifications
***The max sample rate of the module is 48 mhz (12.288/256)*** (pg 7, subnotes)
XTAlI - basically the "master clock" of the VS1053 module runs at 12-13 mHZ
CLKI - this is the "artificialy" clock generated by the internal PLL
    The clock speed is determined by "multipliers"
        These can be changed in multiples of .5
            Upon a reset, it is equal to XTALI (x1.0)
        SPI speeds of the MC should match CLKI (internal clock)



Setting XRESET Low will put the module in low power mode
Register will need to be reset after raising it again

We use SPI_Mode0 since low is chip select and data is read on the falling edge of the clock signal

When listenting to internet radio ensure that you consider bitrate (bits/second)


Page 49 play and decode:

This is the default playback mode.
1. Send an audio file to VS1053b.
2. Read extra parameter value endFillByte (Chapter 10.11).
3. Send at least 2052 bytes of endFillByte[7:0].
4. Set SCI_MODE bit SM_CANCEL.
5. Send at least 32 bytes of endFillByte[7:0].
6. Read SCI_MODE. If SM_CANCEL is still set, go to 5. If SM_CANCEL hasn’t cleared
after sending 2048 bytes, do a software reset (this should be extremely rare).
7. The song has now been successfully sent. HDAT0 and HDAT1 should now both contain
0 to indicate that no format is being decoded. Return to 1.

10.5.2 Cancelling Playback
1. Send a portion of an audio file to VS1053b.
2. Set SCI_MODE bit SM_CANCEL.
3. Continue sending audio file, but check SM_CANCEL after every 32 bytes of data. If it
is still set, goto 3. If SM_CANCEL doesn’t clear after 2048 bytes or one second, do a
software reset (this should be extremely rare).
4. When SM_CANCEL has cleared, read extra parameter value endFillByte (Chapter 10.11).
5. Send 2052 bytes of endFillByte[7:0].
6. HDAT0 and HDAT1 should now both contain 0 to indicate that no format is being decoded.
You can now send the next audio file.



In the datasheet, the highest order of bits is the most significant one??
For example for SCI_CLOCKF SC_MULT (bits 15:13) are the first three bits

Remember in binary numbers the most significant bit is on the right (this is unlike bas 10)


old_sine_test()
Post note:
The old sine test method only allows a max of 12,000 hz (48,000 * 0.25)
this is because we only have 5 bits for the sine skip speed which allows for a max value of 32
yet the max value of the parameter is 128
and the final frequency is determined by ((sine_skip_speed)/128)*samplerate

this is why I have to ensure that the chosen sample rate/particular frequency < 32/128 (0.25)
I do this by making sure that the frequency is less than a quarter of the sample rate


sine_test()
max frequency for this function is 24000 as per the datasheet (pg 67/68)
it says the max value of SCI_AICT RL is 0x8000 (32768)
Using the formula we can find out the max frequency to be 24000
Note: FREQs = 48000
I push the max sample rate (48 kHZ) divided by two since that's how the SCI_AUDATA accepts it (since last value is 0 or 1, it becomes 48khz anyway) 


If you need to keep the system running while not decoding data, but need to lower the power
consumption, you can use the following tricks.
• Select the 1.0× clock by writing 0x0000 to SCI_CLOCKF. This disables the PLL and saves
some power.
• Write a low non-zero value, such as 0x0010 to SCI_AUDATA. This will reduce the samplerate and the number of audio interrupts required. Between audio interrupts the VSDSP
core will just wait for an interrupt, thus saving power.
• Turn off all audio post-processing (tone controls and EarSpeaker).
• If possible for the application, write 0xffff to SCI_VOL to disable the analog drivers.


In order to record/stream PCM microphone data, the appropriate PCM fix patch has to be loaded everytime a hardware reset occurs
I store this patch in the 4mb flash memory of the esp32